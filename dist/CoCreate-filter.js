(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["filter"] = factory();
	else
		root["CoCreate"] = root["CoCreate"] || {}, root["CoCreate"]["filter"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../CoCreate-components/CoCreate-filter/src/CoCreate-filter.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../CoCreate-components/CoCreate-filter/src/CoCreate-filter.js":
/*!*********************************************************************!*\
  !*** ../CoCreate-components/CoCreate-filter/src/CoCreate-filter.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"../node_modules/@babel/runtime/helpers/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);\n\nvar CoCreateFilter = {\n  items: [],\n  ioInstance: null,\n  moduleAttribues: [],\n  module_items: [],\n\n  /** start init processing **/\n  init: function init() {\n    this.__initIntesection();\n\n    this.__initSocket();\n\n    this.__initEvents();\n  },\n  __initIntesection: function __initIntesection() {\n    var self = this;\n    this.ioInstance = new IntersectionObserver(function (entries, observer) {\n      entries.forEach(function (entry) {\n        if (entry.isIntersecting) {\n          var attributeInfo = self.__getMainAttribue(entry.target);\n\n          if (attributeInfo.id) {\n            document.dispatchEvent(new CustomEvent('CoCreateFilter-loadMore', {\n              detail: {\n                attrName: attributeInfo.name,\n                attrId: attributeInfo.id\n              }\n            }));\n          }\n\n          self.ioInstance.unobserve(entry.target);\n        }\n      });\n    }, {\n      threshold: 1\n    });\n  },\n  __runLoadMore: function __runLoadMore(attrName, id) {\n    if (!id || !attrName) return;\n    var item = this.items.find(function (item) {\n      return item.attrName === attrName && item.id === id;\n    });\n    if (!item) return;\n\n    if (item.count > 0) {\n      this.fetchData(item);\n    }\n  },\n  __getMainAttribue: function __getMainAttribue(el) {\n    var attribute = this.moduleAttribues.find(function (attr) {\n      return (el.getAttribute(attr) || \"\") !== \"\";\n    });\n\n    if (attribute) {\n      return {\n        name: attribute,\n        id: el.getAttribute(attribute)\n      };\n    } else {\n      return {};\n    }\n  },\n  __initSocket: function __initSocket() {\n    var self = this;\n    CoCreate.crud.listenMessage('readDocumentList', function (data) {\n      var item_id = data['element'];\n      var item = self.items.find(function (item) {\n        return item.id === item_id;\n      });\n\n      if (item) {\n        // eObj.startIndex += data.result.length;\n        var result_data = data['data']; //. set the intersection observe element\n\n        var element = document.querySelector(\"[\".concat(item.attrName, \"=\\\"\").concat(item.id, \"\\\"][data-fetch_type=\\\"scroll\\\"]\"));\n\n        if (result_data.length > 0 && element) {\n          self.ioInstance.observe(element);\n        } // /** render total count **/\n\n\n        var totalCount = data['operator'].total;\n        var totalElements = document.querySelectorAll(\"[\".concat(item.attrName, \"=\\\"\").concat(item.id, \"\\\"][data-fetch_type=\\\"total\\\"]\"));\n\n        if (totalElements) {\n          totalElements.forEach(function (el) {\n            return el.innerHTML = totalCount;\n          });\n        }\n      }\n    });\n  },\n  __initEvents: function __initEvents() {\n    var self = this;\n    document.addEventListener('CoCreateFilter-loadMore', function (event) {\n      var attrId = event.detail.attrId;\n      var attrName = event.detail.attrName;\n\n      self.__runLoadMore(attrName, attrId);\n    });\n    var buttons = document.querySelectorAll('[data-fetch_type=\"loadmore\"]');\n    buttons.forEach(function (btn) {\n      btn.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        var attributeInfo = self.__getMainAttribue(btn);\n\n        if (!attributeInfo.id) return;\n\n        self.__runLoadMore(attributeInfo.attrName, attributeInfo.attrId);\n      });\n    });\n  },\n\n  /** ---  End --- **/\n  setFilter: function setFilter(el, mainAttr, type) {\n    if (!mainAttr) {\n      return;\n    }\n\n    var id = el.getAttribute(mainAttr);\n    if (!id) return;\n    if (!this.moduleAttribues.includes(mainAttr)) this.moduleAttribues.push(mainAttr);\n    var collection = el.getAttribute('data-fetch_collection');\n    var fetch_type = el.getAttribute('data-fetch_value_type');\n    var fetch_collection = fetch_type == \"collection\" ? true : false;\n    var order_name = el.getAttribute('data-order_by');\n    var order_type = el.getAttribute('data-order_type') || 'asc';\n    var fetch_count = parseInt(el.getAttribute('data-fetch_count'));\n    var item = {\n      el: el,\n      id: id,\n      eId: id,\n      // + this.items.length,\n      type: type,\n      attrName: mainAttr,\n      collection: collection,\n      startIndex: 0,\n      options: {},\n\n      /** return options **/\n      fetch: {},\n      is_collection: fetch_collection,\n      search: {\n        type: 'or',\n        value: []\n      },\n      orders: [],\n      filters: []\n    };\n\n    if (!isNaN(fetch_count) && fetch_count > 0) {\n      item.count = fetch_count;\n    }\n\n    if (order_name) {\n      item.orders.push({\n        name: order_name,\n        type: order_type == 'asc' ? 1 : -1\n      });\n    }\n\n    this._initFilter(item, id, mainAttr);\n\n    this._initOrder(item, id, mainAttr);\n\n    this.items.push(item);\n\n    this._initInputForm(item, mainAttr);\n\n    this._initExportImport(item, id, mainAttr);\n\n    return item;\n  },\n  _initFilter: function _initFilter(item, id, attrName) {\n    var filter_objs = item.el.getRootNode().querySelectorAll('[' + attrName + '=\"' + id + '\"]');\n\n    for (var i = 0; i < filter_objs.length; i++) {\n      var f_el = filter_objs[i];\n      var filter_name = f_el.getAttribute('data-filter_name');\n      var filter_operator = f_el.getAttribute('data-filter_operator') ? f_el.getAttribute('data-filter_operator') : '$contain';\n      var value_type = f_el.getAttribute('data-filter_value_type') ? f_el.getAttribute('data-filter_value_type') : 'string';\n      var filter_type = f_el.getAttribute('data-filter_type');\n      var filter_value = f_el.getAttribute('data-filter_value');\n\n      if (filter_value == null) {\n        continue;\n      }\n\n      if (value_type !== \"raw\") {\n        filter_value = filter_value.replace(/\\s/g, '').split(',');\n      }\n\n      if (!filter_name) {\n        item.search.value = this._makeSearchOption(id, attrName);\n      } else {\n        var idx = this.getFilterByName(item, filter_name, filter_operator);\n\n        if (value_type != 'string') {\n          for (var _i = 0; _i < filter_value.length; _i++) {\n            filter_value[_i] = Number(filter_value[_i]);\n          }\n        }\n\n        this.insertArrayObject(item.filters, idx, {\n          name: filter_name,\n          value: filter_value,\n          operator: filter_operator,\n          type: filter_type\n        });\n      }\n    }\n  },\n  _initOrder: function _initOrder(item, id, attrName) {\n    var filter_objs = item.el.getRootNode().querySelectorAll('[' + attrName + '=\"' + id + '\"]');\n\n    var _this = this;\n\n    for (var i = 0; i < filter_objs.length; i++) {\n      var f_el = filter_objs[i];\n      var order_name = f_el.getAttribute('data-order_by');\n      var order_value = f_el.getAttribute('value');\n\n      if (!order_name || !order_value) {\n        continue;\n      }\n\n      if (['A', 'BUTTON'].includes(f_el.tagName)) {\n        f_el.addEventListener('click', function () {\n          var name = this.getAttribute('data-order_by');\n          var value = this.getAttribute('value');\n\n          _this._applyOrder(item, name, value);\n\n          if (item.el) {\n            item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n              detail: {\n                type: 'order'\n              }\n            }));\n          }\n        }); //. apply click event\n      } else {\n        this._applyOrder(item, order_name, order_value);\n      }\n    }\n\n    this._initToggleOrderEvent(item, id, attrName);\n  },\n  _initToggleOrderEvent: function _initToggleOrderEvent(item, id, attrName) {\n    var elements = document.querySelectorAll(\"[\".concat(attrName, \"=\\\"\").concat(id, \"\\\"][data-toggle_order]\"));\n    var self = this;\n    elements.forEach(function (element) {\n      element.addEventListener('click', function () {\n        var value = this.getAttribute('data-toggle_order') || '';\n        var order_name = this.getAttribute('data-order_by');\n        value = value === 'asc' ? 'desc' : 'asc';\n\n        for (var i = 0; i < elements.length; i++) {\n          if (elements[i] !== element) {\n            elements[i].setAttribute('data-toggle_order', '');\n          }\n        }\n\n        item.orders = [];\n\n        self._applyOrder(item, order_name, value);\n\n        element.setAttribute('data-toggle_order', value);\n\n        if (item.el) {\n          item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n            detail: {\n              type: 'order'\n            }\n          }));\n        }\n      });\n    });\n  },\n  _initExportImport: function _initExportImport(item, id, attrName) {\n    var export_button = document.querySelector(\"[data-export_type][\".concat(attrName, \"=\\\"\").concat(id, \"\\\"]\"));\n    var import_button = document.querySelector(\"[data-import=\\\"true\\\"][\".concat(attrName, \"=\\\"\").concat(id, \"\\\"]\"));\n    var self = this;\n\n    if (export_button) {\n      //. export_buttons action\n      export_button.addEventListener('click', function () {\n        if (!item) return;\n        var new_filter = self.makeFetchOptions(item);\n        new_filter[\"export\"] = {\n          collection: new_filter.collection,\n          type: export_button.getAttribute('data-export_type') || 'json'\n        };\n        CoCreate.crud.readDocumentList(new_filter);\n      });\n    }\n\n    if (import_button) {\n      //. import button action\n      import_button.addEventListener('click', function () {\n        var input = document.createElement('input');\n        input.type = 'file';\n        if (!item) return;\n        var collection = item.collection; //. or \n        // collection = btn.getAttribute('data-collection');\n\n        input.onchange = function (e) {\n          var file = e.target.files[0];\n          CoCreate.crud.importCollection({\n            collection: collection,\n            file: file\n          });\n        };\n\n        input.click();\n      });\n    }\n  },\n  _applyOrder: function _applyOrder(item, name, value) {\n    if (!value) {\n      return;\n    }\n\n    var order_type = 0;\n    var idx = this.getOrderByName(item, name);\n\n    if (value == 'asc') {\n      order_type = 1;\n    } else if (value == 'desc') {\n      order_type = -1;\n    } else {\n      order_type = [];\n    }\n\n    this.insertArrayObject(item.orders, idx, {\n      name: name,\n      type: order_type\n    }, order_type);\n  },\n  changeCollection: function changeCollection(filter) {\n    var collection = filter.el.getAttribute('data-fetch_collection');\n    filter.collection = collection;\n    filter.startIndex = 0;\n  },\n  _makeSearchOption: function _makeSearchOption(id, attrName) {\n    var forms = document.querySelectorAll('form[' + attrName + '=' + id + ']');\n    var tmpSelector = '[' + attrName + '=' + id + ']';\n    var otherInputs = document.querySelectorAll('input' + tmpSelector + ',textarea' + tmpSelector + ', select' + tmpSelector);\n    var template_inputs = [];\n\n    for (var _i2 = 0; _i2 < forms.length; _i2++) {\n      var form = forms[_i2];\n      var formInputs = form.querySelectorAll('input, textarea, select');\n      formInputs = Array.prototype.slice.call(formInputs);\n      template_inputs = template_inputs.concat(formInputs);\n    }\n\n    otherInputs = Array.prototype.slice.call(otherInputs);\n    template_inputs = template_inputs.concat(otherInputs);\n    var values = [];\n\n    for (var i = 0; i < template_inputs.length; i++) {\n      var filter_name = template_inputs[i].getAttribute('data-filter_name');\n      var order_name = template_inputs[i].getAttribute('data-order_by');\n      var input = template_inputs[i];\n      var value_type = input.getAttribute('data-value_type') ? input.getAttribute('data-value_type') : 'string';\n      var value = null;\n\n      if (!filter_name && !order_name) {\n        if (input.type == 'checkbox' && !input.checked) {\n          value = null;\n        } else {\n          value = input.value;\n\n          if (value_type != 'string') {\n            value = Number(value);\n          }\n\n          if (value && !values.includes(value)) {\n            values.push(value);\n          }\n        }\n      }\n    }\n\n    return values;\n  },\n  _initInputForm: function _initInputForm(item, attrName) {\n    if (!item) return;\n    var tmpSelector = '[' + attrName + '=\"' + item.id + '\"]';\n    var formInputs = item.el.getRootNode().querySelectorAll('form' + tmpSelector + ' input, form' + tmpSelector + ' textarea, form' + tmpSelector + ' select');\n    var otherInputs = item.el.getRootNode().querySelectorAll('input' + tmpSelector + ',textarea' + tmpSelector + ', select' + tmpSelector);\n    this.setCheckboxName(item.id, attrName);\n    formInputs = Array.prototype.slice.call(formInputs);\n    otherInputs = Array.prototype.slice.call(otherInputs);\n    formInputs = formInputs.concat(otherInputs);\n    console.log('input form', tmpSelector);\n\n    for (var i = 0; i < formInputs.length; i++) {\n      var input = formInputs[i];\n      var order_by = input.getAttribute('data-order_by');\n\n      if (order_by) {\n        this._initOrderInput(item, input);\n      } else {\n        this._initFilterInput(item, input, item.id);\n      }\n    }\n  },\n  _initOrderInput: function _initOrderInput(item, input) {\n    var _instance = this;\n\n    input.addEventListener('change', function (e) {\n      e.preventDefault();\n      var order_by = this.getAttribute('data-order_by');\n      var order_type = 0;\n\n      var idx = _instance.getOrderByName(item, order_by);\n\n      if (this.value == 'asc') {\n        order_type = 1;\n      } else if (this.value == 'desc') {\n        order_type = -1;\n      } else {\n        order_type = [];\n      }\n\n      _instance.insertArrayObject(item.orders, idx, {\n        name: order_by,\n        type: order_type\n      }, order_type);\n\n      if (item.el) {\n        item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n          detail: {\n            type: 'order'\n          }\n        }));\n      }\n    });\n  },\n  _initFilterInput: function _initFilterInput(item, input, id) {\n    var _instance = this;\n\n    var delayTimer;\n    input.addEventListener('input', function (e) {\n      e.preventDefault();\n      var filter_name = this.getAttribute('data-filter_name');\n      var filter_operator = this.getAttribute('data-filter_operator') || '$contain';\n      var filter_type = this.getAttribute('data-filter_type');\n      var value_type = this.getAttribute('data-filter_value_type') || 'string';\n      clearTimeout(delayTimer);\n      delayTimer = setTimeout(function () {\n        if (!filter_name) {\n          item.search.value = _instance._makeSearchOption(id, item.attrName);\n        } else {\n          var idx = _instance.getFilterByName(item, filter_name, filter_operator);\n\n          var inputType = input.type;\n          var filterValue = [];\n\n          if (inputType == 'checkbox') {\n            var inputGroup = document.querySelectorAll(\"input[name=\" + input.name + \"]:checked\");\n\n            for (var i = 0; i < inputGroup.length; i++) {\n              filterValue.push(inputGroup[i].value);\n            }\n          } else if (inputType == 'raido') {} else if (inputType == 'range') {\n            filterValue = [Number(input.min), Number(input.value)];\n          } else {\n            var value = input.value;\n\n            if (value_type != 'string') {\n              value = Number(value);\n            }\n\n            if (value != \"none\") {\n              filterValue = [value];\n            }\n\n            if (value_type === \"raw\") {\n              filterValue = value;\n            }\n          }\n\n          _instance.insertArrayObject(item.filters, idx, {\n            name: filter_name,\n            value: filterValue,\n            operator: filter_operator,\n            type: filter_type\n          });\n        }\n\n        if (item.el) {\n          item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n            detail: {\n              type: 'filter'\n            }\n          }));\n        }\n      }, 500);\n    });\n  },\n  setCheckboxName: function setCheckboxName(id, attrName) {\n    var forms = document.querySelectorAll('form[' + attrName + '=\"' + id + '\"]');\n\n    for (var k = 0; k < forms.length; k++) {\n      var elements = forms[k].querySelectorAll('input[type=checkbox], form input[type=radio]');\n\n      for (var i = 0; i < elements.length; i++) {\n        var el_name = elements[i].getAttribute('name');\n        var f_name = elements[i].getAttribute('data-filter_name');\n\n        if (el_name || !f_name) {\n          continue;\n        }\n\n        elements[i].setAttribute('name', \"_\" + id + \"-\" + f_name + \"_\" + k);\n      }\n    }\n  },\n  getFilterByName: function getFilterByName(item, filterName, filterOperator) {\n    for (var i = 0; i < item.filters.length; i++) {\n      var f = item.filters[i];\n\n      if (f.name == filterName && f.operator == filterOperator) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  insertArrayObject: function insertArrayObject(data, idx, obj, value) {\n    if (!value) {\n      value = obj.value;\n    }\n\n    if (_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(value) == 'object' && value.length == 0) {\n      if (idx != -1) {\n        data.splice(idx, 1);\n      }\n    } else {\n      if (idx != -1) {\n        data[idx] = obj;\n      } else {\n        data.push(obj);\n      }\n    }\n\n    return data;\n  },\n  getOrderByName: function getOrderByName(item, name) {\n    for (var i = 0; i < item.orders.length; i++) {\n      if (item.orders[i].name == name) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  defineEvent: function defineEvent(item) {\n    item.el.addEventListener('fetchFilterData', function (event) {\n      console.log(event);\n    });\n  },\n  fetchData: function fetchData(item) {\n    var json = this.makeFetchOptions(item);\n    CoCreate.crud.readDocumentList(json);\n  },\n  getObjectByFilterId: function getObjectByFilterId(obj, id) {\n    for (var i = 0; i < obj.length; i++) {\n      var filter = obj[i].filter;\n\n      if (!filter) {\n        continue;\n      }\n\n      if (filter.id == id) {\n        return obj[i];\n      }\n    }\n  },\n  getObjectByElement: function getObjectByElement(obj, el) {\n    for (var i = 0; i < obj.length; i++) {\n      var filter = obj[i].filter;\n\n      if (!filter) {\n        continue;\n      }\n\n      if (filter.el.isSameNode(el)) {\n        return obj[i];\n      }\n    }\n  },\n  makeFetchOptions: function makeFetchOptions(item) {\n    var json = {\n      \"collection\": item.collection,\n      \"element\": item.eId,\n      \"metadata\": {\n        isRefresh: item.isRefresh\n      },\n      \"operator\": {\n        \"filters\": item.filters,\n        \"orders\": item.orders,\n        \"search\": item.search,\n        \"startIndex\": item.startIndex\n      },\n      \"is_collection\": item.is_collection\n    };\n\n    if (item.count) {\n      json['operator'].count = item.count;\n    }\n\n    return json;\n  },\n  add: function add(_ref) {\n    var name = _ref.name,\n        attribute = _ref.attribute,\n        callback = _ref.callback;\n    var elements = document.querySelectorAll(\"[data-fetch_collection][\".concat(attribute, \"]\"));\n    var self = this;\n    elements.forEach(function (el) {\n      self.__initFilterElement(el, attribute, name);\n    });\n    CoCreate.socket.listen('readDocumentList', function (data) {\n      callback.call(null, data);\n    });\n  },\n  __initFilterElement: function __initFilterElement(el, attribute, name) {\n    var _id = el.getAttribute(attribute);\n\n    var self = this;\n    if (!_id) return; //. restrict the duplication define\n    // if (this.module_items.some(x => x.name == name && x.id == _id)) {\n    // \treturn;\n    // }\n\n    var filter = this.setFilter(el, attribute, name);\n\n    if (filter) {\n      this.module_items.push({\n        el: el,\n        filter: filter,\n        id: _id,\n        name: name\n      });\n      el.addEventListener('changeFilterInput', function (e) {\n        self.fetchData(filter);\n      });\n      this.fetchData(filter);\n    }\n  }\n};\nCoCreateFilter.init();\n/* harmony default export */ __webpack_exports__[\"default\"] = (CoCreateFilter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-filter/src/CoCreate-filter.js\n");

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/typeof.js":
/*!********************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/typeof.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5maWx0ZXIvLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzPzdiZTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@babel/runtime/helpers/typeof.js\n");

/***/ })

/******/ })["default"];
});